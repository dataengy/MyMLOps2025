version: '3.8'

services:
  # PostgreSQL for MLflow and metadata
  postgres:
    image: postgres:15
    container_name: nytaxi_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-nytaxi_mlops}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MLflow Tracking Server
  mlflow:
    build:
      context: .
      dockerfile: docker/mlflow/Dockerfile
    container_name: nytaxi_mlflow
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-nytaxi_mlops}
      - MLFLOW_ARTIFACT_ROOT=/mlflow/artifacts
    volumes:
      - mlflow_artifacts:/mlflow/artifacts
      - ./models:/app/models
    ports:
      - "5000:5000"
    command: >
      mlflow server 
      --backend-store-uri postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-nytaxi_mlops}
      --default-artifact-root /mlflow/artifacts
      --host 0.0.0.0
      --port 5000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prediction API
  api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    container_name: nytaxi_api
    depends_on:
      mlflow:
        condition: service_healthy
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    volumes:
      - ./models:/app/models
      - ./data:/app/data
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Dagster (Optional - for development)
  dagster:
    build:
      context: .
      dockerfile: docker/dagster/Dockerfile
    container_name: nytaxi_dagster
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DAGSTER_POSTGRES_USER=${POSTGRES_USER:-postgres}
      - DAGSTER_POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - DAGSTER_POSTGRES_DB=${POSTGRES_DB:-nytaxi_mlops}
      - DAGSTER_POSTGRES_HOSTNAME=postgres
    volumes:
      - ./src:/app/src
      - ./data:/app/data
      - ./models:/app/models
      - dagster_home:/app/dagster_home
    ports:
      - "3001:3001"
    command: >
      dagster dev 
      --host 0.0.0.0 
      --port 3001
      -f /app/src/dagster_app.py

  # Monitoring Dashboard (Evidently)
  monitoring:
    build:
      context: .
      dockerfile: docker/monitoring/Dockerfile
    container_name: nytaxi_monitoring
    volumes:
      - ./monitoring_reports:/app/reports
      - ./data:/app/data
      - ./models:/app/models
    ports:
      - "8001:8001"
    environment:
      - EVIDENTLY_UI_PORT=8001

volumes:
  postgres_data:
  mlflow_artifacts:
  dagster_home:

networks:
  default:
    name: nytaxi_network