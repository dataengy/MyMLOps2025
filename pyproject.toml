[project]
name = "mymlops-nytaxi"
version = "0.1.0"
description = "MLOps pipeline for NYC Taxi trip duration prediction"
authors = [
    {name = "Data Engineer", email = "engineer@example.com"}
]
requires-python = ">=3.11"
dependencies = [
    # Data processing
    "pandas>=2.2.0",
    "duckdb>=0.9.0",
    "pyarrow>=14.0.0",
    "polars>=0.20.0",
    
    # ML framework
    "scikit-learn>=1.4.0",
    "numpy>=1.26.0",
    "scipy>=1.10.0",
    
    # MLOps
    "mlflow>=2.8.0",
    "dagster>=1.5.0",
    "dagster-webserver>=1.5.0",
    "evidently>=0.4.0",
    
    # API
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "pydantic>=2.5.0",
    
    # Database
    "psycopg2-binary>=2.9.0",
    "sqlalchemy>=2.0.0",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "click>=8.1.0",
    "rich>=13.6.0",
    "typer>=0.9.0",
    "httpx>=0.25.0",
    
    # Data validation
    "pydantic>=2.5.0",
    "great-expectations>=0.18.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    
    # Code quality
    "ruff>=0.1.0",
    "black>=23.9.0",
    "isort>=5.12.0",
    "mypy>=1.6.0",
    "pre-commit>=3.5.0",
    
    # Jupyter
    "jupyter>=1.0.0",
    "jupyterlab>=4.0.0",
    "notebook>=7.0.0",
    
    # Profiling
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.0",
]

cloud = [
    # AWS
    "boto3>=1.34.0",
    "s3fs>=2023.12.0",
    
    # Terraform
    "python-terraform>=0.10.1",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.black]
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "slow: marks tests as slow",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]