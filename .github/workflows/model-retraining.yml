name: Model Retraining

on:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      data_months:
        description: 'Number of months of data to use'
        required: true
        default: '3'
        type: string
      model_type:
        description: 'Model type to train'
        required: true
        default: 'baseline'
        type: choice
        options:
          - baseline
          - random_forest

env:
  PYTHON_VERSION: "3.11"

jobs:
  retrain-model:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v2
    
    - name: Install dependencies
      run: uv sync
    
    - name: Download latest data
      run: |
        # Download last 3 months of data (or custom amount)
        MONTHS=${{ github.event.inputs.data_months || '3' }}
        uv run python scripts/download_data.py --months $(seq -s' ' 1 $MONTHS) --output-dir data/raw
    
    - name: Process data
      run: |
        uv run python scripts/process_data.py --input-dir data/raw --output-dir data/processed
    
    - name: Train new model
      env:
        MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
      run: |
        MODEL_TYPE=${{ github.event.inputs.model_type || 'baseline' }}
        uv run python src/train.py --model $MODEL_TYPE
    
    - name: Evaluate model performance
      run: |
        uv run python src/evaluate.py
    
    - name: Generate model report
      run: |
        echo "## Model Retraining Report" > model_report.md
        echo "- **Date**: $(date)" >> model_report.md
        echo "- **Model Type**: ${{ github.event.inputs.model_type || 'baseline' }}" >> model_report.md
        echo "- **Data Months**: ${{ github.event.inputs.data_months || '3' }}" >> model_report.md
        echo "- **Status**: Success" >> model_report.md
    
    - name: Upload model artifacts
      uses: actions/upload-artifact@v3
      with:
        name: retrained-model-${{ github.run_number }}
        path: |
          models/
          model_report.md
        retention-days: 30
    
    - name: Deploy model to staging
      run: |
        echo "Deploying retrained model to staging..."
        # Add deployment commands here
    
    - name: Create pull request for model update
      if: success()
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore: update model from automated retraining"
        title: "Automated Model Retraining - ${{ github.run_number }}"
        body: |
          ## Automated Model Retraining
          
          This PR contains the results of automated model retraining.
          
          **Details:**
          - Model Type: ${{ github.event.inputs.model_type || 'baseline' }}
          - Data Months: ${{ github.event.inputs.data_months || '3' }}
          - Training Date: ${{ github.run_number }}
          
          Please review the model performance metrics before merging.
        branch: automated-retraining-${{ github.run_number }}
        
  validate-retrained-model:
    runs-on: ubuntu-latest
    needs: retrain-model
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: uv sync
    
    - name: Download model artifacts
      uses: actions/download-artifact@v3
      with:
        name: retrained-model-${{ github.run_number }}
        path: models/
    
    - name: Validate model performance
      run: |
        echo "Validating retrained model performance..."
        # Add model validation logic here
        # - Compare with previous model
        # - Check performance thresholds
        # - Run model tests
    
    - name: Generate validation report
      run: |
        echo "Model validation completed successfully"