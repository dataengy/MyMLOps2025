name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"
    
    - name: Install dependencies
      run: |
        uv sync --extra dev
    
    - name: Run linting
      run: |
        uv run ruff check src tests
        uv run ruff format --check src tests
    
    - name: Run type checking
      run: |
        uv run mypy src --ignore-missing-imports
    
    - name: Run tests
      run: |
        uv run pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v2
    
    - name: Install dependencies
      run: uv sync --extra dev
    
    - name: Run security scan
      run: |
        uv run bandit -r src -ll

  data-validation:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v2
    
    - name: Install dependencies
      run: uv sync
    
    - name: Download sample data
      run: |
        uv run python scripts/download_data.py --sample --output-dir data/raw
    
    - name: Validate data processing
      run: |
        uv run python scripts/process_data.py --input-dir data/raw --output-dir data/processed --sample-size 1000

  model-training:
    runs-on: ubuntu-latest
    needs: [lint-and-test, data-validation]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v2
    
    - name: Install dependencies
      run: uv sync
    
    - name: Download and process data
      run: |
        uv run python scripts/download_data.py --sample --output-dir data/raw
        uv run python scripts/process_data.py --input-dir data/raw --output-dir data/processed --sample-size 5000
    
    - name: Train baseline model
      run: |
        uv run python src/train.py --model baseline --no-mlflow
    
    - name: Upload model artifacts
      uses: actions/upload-artifact@v3
      with:
        name: trained-models
        path: models/
        retention-days: 7

  docker-build:
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and test API image
      run: |
        docker build -f docker/api/Dockerfile -t nytaxi-api:test .
    
    - name: Test API container
      run: |
        # Start container in background
        docker run -d --name api-test -p 8000:8000 nytaxi-api:test
        sleep 10
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        # Stop container
        docker stop api-test
        docker rm api-test
    
    - name: Build and push images
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        # Build and push API image
        docker build -f docker/api/Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/nytaxi-api:latest .
        docker push ${{ secrets.DOCKER_USERNAME }}/nytaxi-api:latest
        
        # Build and push MLflow image
        docker build -f docker/mlflow/Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/nytaxi-mlflow:latest .
        docker push ${{ secrets.DOCKER_USERNAME }}/nytaxi-mlflow:latest

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [model-training, docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        # This could include:
        # - Updating Kubernetes manifests
        # - Deploying to cloud platforms
        # - Running integration tests
        echo "Staging deployment completed"
    
    - name: Run integration tests
      run: |
        echo "Running integration tests..."
        # Add integration test commands here
        echo "Integration tests passed"

  deploy-production:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        echo "Production deployment completed"
    
    - name: Run smoke tests
      run: |
        echo "Running production smoke tests..."
        # Add smoke test commands here
        echo "Smoke tests passed"